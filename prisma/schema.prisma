// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model store {
  id          String      @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Catergory[] @relation("StoreToCategory")
  sizes       Size[]      @relation("StoreToSize")
  colors      Color[]      @relation("StoreToColor")
  products    Product[]      @relation("StoreToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Catergory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Catergory {
  id          String      @id @default(uuid())
  storeId     String
  store       store       @relation("StoreToCategory", fields:  [storeId], references: [id])
  billboardId String
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  products    Product[]   @relation("CategoryToProduct")
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String      @id @default(uuid())
  storeId     String
  store       store       @relation("StoreToSize", fields:  [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id          String      @id @default(uuid())
  storeId     String
  store       store       @relation("StoreToColor", fields:  [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       store       @relation("StoreToProduct", fields:  [storeId], references: [id])
  categoryId  String
  category    Catergory   @relation("CategoryToProduct", fields:  [categoryId], references: [id])
  name        String
  Price       Decimal
  isFeatured  Boolean     @default(false)
  isArchive   Boolean     @default(false)
  sizeId      String
  size        Size        @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color       @relation(fields: [colorId], references: [id])
  images      Image[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String      @id @default(uuid())
  productId   String
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
}
